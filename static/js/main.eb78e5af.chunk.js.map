{"version":3,"sources":["components/footer/footer.jsx","config.js","components/pages/photo/img-gallery.jsx","components/helpers/useEvent.jsx","components/header/header.jsx","components/pages/photo/cant-breathe.jsx","components/pages/misc/under-construction.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","href","Firebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ImgGallery","photos4k","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","nodeLimit","setNodeLimit","isRetina","setIsRetina","photos2k","setPhotos2k","photos1k","setPhotos1k","openLightbox","useCallback","event","photo","index","transformPhotoRes","photoSet","resolution","map","splitSrc","src","split","folder","fileName","slice","transformedSrc","title","useEffect","viewportCalc","photoSet1k","photoSet2k","viewportWidth","window","innerWidth","console","log","devicePixelRatio","matchMedia","matches","handler","passive","addEventListener","removeEventListener","useEvent","photos","onClick","targetRowHeight","direction","limitNodeSearch","imgs","x","srcset","caption","description","isOpen","currImg","onClickPrev","onClickNext","onClose","Header","props","style","margin","textAlign","CantBreathe","setPhotos4k","ref","database","listener","on","snap","val","off","marginTop","textDecoration","role","UnderConstruction","className","withRouter","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb78e5af.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div>\n      <h5>\n        <small>\n        All current works on this site are shared under the Creative Commons CC BY-NC-SA 3.0 license; commercial use prohibited.\n        </small>\n        <br/>\n        <small>For photo/film bookings, contact me: <a href=\"mailto:chase@cyanbluecreative.com\">chase@cyanbluecreative.com</a></small>\n      </h5>\n      <h5><small>CyanBlueCreative © 2020</small></h5>\n    </div>\n  );\n};\n\nexport default Footer;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\nexport const DB_CONFIG = {\n  apiKey: \"AIzaSyBfrtj2KoLLz_YDsg_W_VgOx2402zETg4w\",\n  authDomain: \"cyanbluecreative.firebaseapp.com\",\n  databaseURL: \"https://cyanbluecreative.firebaseio.com\",\n  projectId: \"cyanbluecreative\",\n  storageBucket: \"cyanbluecreative.appspot.com\",\n  messagingSenderId: \"769914626190\",\n  appId: \"1:769914626190:web:c0fc731da834a4d453a9df\",\n  measurementId: \"G-5B6BLYR73S\"\n};\n\nconst Firebase = firebase.initializeApp(DB_CONFIG);\nexport default Firebase;","import React, { useState, useEffect, useCallback } from 'react';\nimport useEvent from '../../helpers/useEvent';\nimport Gallery from 'react-photo-gallery';\nimport Carousel, { Modal, ModalGateway } from 'react-images';\nimport ImgsViewer from 'react-images-viewer';\n\nconst ImgGallery = ({ photos4k }) => {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [nodeLimit, setNodeLimit] = useState(2);\n  const [isRetina, setIsRetina] = useState(false);\n  const [photos2k, setPhotos2k] = useState();\n  const [photos1k, setPhotos1k] = useState();\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    // setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  // TODO: implement shouldcomponentupdate hook to prevent re-render when exiting from lightbox\n\n  const transformPhotoRes = (photoSet, resolution) => {\n    return (\n      photoSet &&\n      photoSet.map((photo) => {\n        const prefix = 'https://media.publit.io/file';\n        const splitSrc = photo.src.split('/');\n        const folder = splitSrc[4];\n        const fileName = splitSrc[6].slice(0, -13);\n        const transformedSrc = `${prefix}/${folder}/${resolution}/${fileName}-${resolution}p-80.jpg`;\n        return {\n          ...photo,\n          src: transformedSrc,\n          // title: `${fileName}-${resolution}p-80`,\n          title: '©CyanBlueCreative',\n        };\n      })\n    );\n  };\n\n  useEffect(() => {\n    viewportCalc();\n    if (!isRetina) {\n      const photoSet1k = transformPhotoRes(photos4k, 1024);\n      setPhotos1k(photoSet1k);\n    }\n    const photoSet2k = transformPhotoRes(photos4k, 2048);\n    setPhotos2k(photoSet2k);\n  }, []);\n\n  // console.log('1111=>', photos1k);\n  // console.log('2222=>', photos2k);\n  // console.log('=x=>', photos4k && photos4k);\n\n  // TODO: implement lazy loading with .slice to divide images into sections\n  // TODO: useEvent to attach listeners or intersection observer\n  // https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video\n  // https://medium.com/the-non-traditional-developer/how-to-use-an-intersectionobserver-in-a-react-hook-9fb061ac6cb5\n\n  // TODO: consider separating viewportWidth and isRetina calculations\n  // TODO: need more conditionals to render 1024p imgs for retina screens <= 512px\n\n  // TODO: abstract viewportCalc into a helper? what to do with states? split into 2 functions? return array?\n  const viewportCalc = () => {\n    const viewportWidth = window.innerWidth;\n    console.log('=>', viewportWidth);\n    if (viewportWidth <= 479) {\n      setNodeLimit(1);\n    } else if (viewportWidth <= 767) {\n      setNodeLimit(2);\n    } else if (viewportWidth <= 2048) {\n      setNodeLimit(3);\n    } else {\n      setNodeLimit(4);\n    }\n    if (\n      (viewportWidth >= 512 && window.devicePixelRatio > 1) ||\n      (viewportWidth >= 512 &&\n        window.matchMedia &&\n        window.matchMedia(\n          '(-webkit-min-device-pixel-ratio: 1.5),(-moz-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)'\n        ).matches)\n    ) {\n      setIsRetina(true);\n    }\n    return;\n  };\n\n  // https://atomizedobjects.com/blog/react/add-event-listener-react-hooks/\n  useEvent('resize', () => viewportCalc());\n\n  // function doSomething(scrollPos) {\n  //   const viewportHeight = window.innerHeight;\n  //   if (scrollPos >= viewportHeight) {\n  //     console.log('SCROLLLL=>', scrollPos);\n  //   }\n  // }\n  // useEvent('scroll', (e) => {\n  //   const scrollPos = window.scrollY;\n  //   let ticking = false;\n  //   if (!ticking) {\n  //     window.requestAnimationFrame(() => {\n  //       doSomething(scrollPos);\n  //       ticking = false;\n  //     });\n\n  //     ticking = true;\n  //   }\n  // });\n\n  // Disable right-click menu\n  // useEvent('contextmenu', (e) => e.preventDefault());\n\n  const onPrev = () => setCurrentImage(currentImage - 1);\n  const onNext = () => setCurrentImage(currentImage + 1);\n\n  return (\n    <div>\n      {(photos1k || photos2k) && (\n        <Gallery\n          photos={isRetina ? photos2k : photos1k}\n          onClick={openLightbox}\n          targetRowHeight={700}\n          direction=\"row\"\n          limitNodeSearch={nodeLimit}\n        />\n      )}\n      {photos2k && <ImgsViewer\n        imgs={(isRetina ? photos4k : photos2k).map((x) => ({\n          ...x,\n          srcset: [],\n          caption: x.description,\n        }))}\n        isOpen={viewerIsOpen}\n        currImg={currentImage}\n        onClickPrev={onPrev}\n        onClickNext={onNext}\n        onClose={closeLightbox}\n      />}\n    </div>\n  );\n};\n\nexport default ImgGallery;\n","// custom hook to attach event listeners\n\nimport { useEffect } from 'react';\n\nexport default function useEvent(event, handler, passive = false) {\n  useEffect(() => {\n    // initiate the event handler\n    window.addEventListener(event, handler, passive);\n\n    // clean up the event every time component is re-rendered\n    return function cleanup() {\n      window.removeEventListener(event, handler);\n    };\n  });\n}\n","import React from 'react';\n// import Navigation from '../navbar/navigation';\n\nconst Header = (props) => {\n  return (\n    <div style={{ margin: '10px', textAlign: 'center' }}>\n      <div>\n        <h1>JUNE 2020 | AUSTIN, TX</h1>\n        <h5>\n        This is a special page in support of the ongoing anti-police brutality\n        protests across the world.\n      </h5>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport Firebase from '../../../config';\n// import useEvent from '../../helpers/useEvent';\nimport ImgGallery from './img-gallery';\nimport Header from '../../header/header';\n\nconst CantBreathe = (props) => {\n  const [photos4k, setPhotos4k] = useState();\n\n  useEffect(() => {\n    const ref = Firebase.database().ref('photos/cantbreathe');\n    const listener = ref.on('value', (snap) => {\n      // console.log('=>', snap.val());\n      if (snap.val()) {\n        setPhotos4k(snap.val());\n      }\n    });\n    return () => {\n      ref.off('value', listener);\n    };\n  }, []);\n\n  // TODO: implement MUI loading spinner while data being fetched?\n  return (\n    <div>\n      <Header />\n      {photos4k && <ImgGallery photos4k={photos4k} />}\n      <div style={{ textAlign: 'center', marginTop: '15px' }}>\n      <h5>POWER TO THE PEOPLE</h5>\n        <a href=\"/\" style={{ textDecoration: 'none' }}>\n          <span role=\"img\">♥️</span>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default CantBreathe;\n","import React from 'react';\n\nconst UnderConstruction = () => {\n  return (\n    <div>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            <b>CYAN BLUE CREATIVE</b>\n          </h1>\n          <small>☕ Currently Undergoing Upgrades ☕</small>\n        </header>\n      </div>\n      <div style={{ textAlign: 'center', marginTop: '15px' }}>\n        <a href=\"/cantbreathe\" style={{ textDecoration: 'none' }}>\n          <span role=\"img\">♥️</span>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default UnderConstruction;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import ImgGallery from './components/pages/photo/img-gallery';\n// import Header from './components/header/header';\nimport Footer from './components/footer/footer';\n// import Navigation from './components/navbar/navigation';\n// import HomePage from './components/pages/home/home-page';\n// import PeoplePortfolio from './components/pages/photo/people-portfolio';\nimport CantBreathe from './components/pages/photo/cant-breathe'\nimport UnderConstruction from './components/pages/misc/under-construction';\nimport { Switch, Route, withRouter } from 'react-router-dom';\n// import Firebase from './config';\n\nconst App = () => {\n  // const [message, toggleMessage] = useState(true);\n  // const [photos, setPhotos] = useState('loading...');\n\n  // TODO: create title banner\n  // TODO: create useEffect calls to gallery db\n  // TODO: store gallery obj in local photo state\n  // TODO: create gallery & lightbox\n  // TODO: add scroll to top button\n\n\n  // // TODO: create call for homepage gallery here\n  // const database = Firebase.database().ref('photos/portraits');\n\n  // useEffect(() => {\n  //   database.on('value', (snap) => {\n  //     setPhotos(snap.val());\n  //   });\n  // }, []);\n\n  // console.log('=>', photos);\n\n  return (\n    <div>\n      {/* {message ? ( */}\n      {/* <UnderConstruction /> */}\n      {/* ) : ( */}\n      {/* <div style={{ margin: '5px' }}> */}\n      {/* <Header /> */}\n      <Switch>\n        <Route exact path=\"/\" component={UnderConstruction} />\n        <Route path=\"/cantbreathe\" component={CantBreathe} />\n        {/* <Route path=\"/home\" component={HomePage} /> */}\n        {/* <Route path=\"/navi\" component={Navigation} /> */}\n        {/* <Route path=\"/gallery\" component={ImgGallery} /> */}\n        {/* <Route\n          path=\"/gallery\"\n          render={(props) => <ImgGallery {...props} photos={photos} />}\n        /> */}\n        {/* <Route path=\"/header\" component={Header} />\n        <Route path=\"/people\" component={PeoplePortfolio} /> */}\n      </Switch>\n      {/* </div> */}\n      {/* )} */}\n      <div style={{ textAlign: 'center', marginTop: '15px' }}>\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}